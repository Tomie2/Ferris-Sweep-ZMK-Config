/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define NUMBER   3

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp F &kp P &kp B 						&kp J &kp L  &kp U    &kp Y   &kp APOSTROPHE 
		&kp A &kp R &kp S &kp T &kp G 			        	        &kp M &kp N &kp E &kp I &kp O
		&kp Z &kp X &kp C &kp D &kp V						&kp K &kp H  &kp CMMA &kp DOT &kp KP_SLASH
          				&to 0 &kp SPC  				&kp SPC &to 1 
		>;
		};

       		lower_layer {
		bindings = <
		&kp ESC  &kp AT    &kp HASH    &kp DOLLAR    &kp PERCENT		&kp CARET &kp AMPS &kp STAR &kp SEMI &kp BSPC 
		&kp TAB    &kp EQUAL    &kp DQT      &kp PIPE2     &kp HASH 		&kp BSLH &kp LEFT_BRACE  &kp RIGHT_BRACE &kp PIPE  &kp RETURN 
		&kp TILDE    &kp TILDE 	&kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2 	&kp LBKT &kp LPAR &kp RPAR &kp RBRC  &to 2
					    &to 0  &kp SPC  					&kp LALT &to 3
		>;
		};
		
		raise_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &to 0 &kp SPC  				&kp LALT  &mo 2 
		>;
		};	
		
		number_layer {
		bindings = <
		&kp ESC  &kp C_PLAY_PAUSE &kp C_PREVIOUS  &kp C_NEXT  &kp UNDERSCORE    			&kp KP_MINUS  &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp BSPC 
		&kp TAB  &kp  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp PLUS 					&kp KP_EQUAL &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp RETURN
		&kp C_RESET  &kp STAR  &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC   &kp PERIOD    	&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp  &to 2
					  &to 0 &kp SPC  								&kp LALT  &mo 2 
		>;
		};	
        
	};
};
